import { Inject, Injectable, RendererStyleFlags2 } from '@angular/core';
import { TinyColor } from '@ctrl/tinycolor';
import { MatCssPalettePrefix } from './model';
import { DOCUMENT } from '@angular/common';
import { DEFAULT_MAT_CSS_CFG } from './default-cfg.const';
import { MATERIAL_CSS_VARS_CFG } from '../mat-css-config-token.const';
import * as i0 from "@angular/core";
// @see: https://github.com/angular/angular/issues/20351
/** @dynamic */
export class MaterialCssVarsService {
    constructor(rendererFactory, document, cfg) {
        this.document = document;
        this.contrastColorThresholdPrimary = '400';
        this.contrastColorThresholdAccent = '400';
        this.contrastColorThresholdWarn = '400';
        this.isAutoContrast = false;
        this.renderer = rendererFactory.createRenderer(null, null);
        this.ROOT = this.document.documentElement;
        this.cfg = {
            ...DEFAULT_MAT_CSS_CFG,
            ...cfg,
        };
        this.isAutoContrast = this.cfg.isAutoContrast;
        if (this.cfg.isDarkTheme) {
            this.setDarkTheme(this.cfg.isDarkTheme);
        }
        if (this.cfg.primary) {
            this.setPrimaryColor(this.cfg.primary);
        }
        if (this.cfg.accent) {
            this.setAccentColor(this.cfg.accent);
        }
        if (this.cfg.warn) {
            this.setWarnColor(this.cfg.warn);
        }
    }
    setPrimaryColor(hex) {
        this.primary = hex;
        const varPrefix = MatCssPalettePrefix.Primary;
        const stylePrimary = this._computePaletteColors(varPrefix, this.primary);
        this._setStyle(stylePrimary);
        if (this.isAutoContrast) {
            this._recalculateAndSetContrastColor(varPrefix);
        }
    }
    setAccentColor(hex) {
        this.accent = hex;
        const varPrefix = MatCssPalettePrefix.Accent;
        const styleAccent = this._computePaletteColors(varPrefix, this.accent);
        this._setStyle(styleAccent);
        if (this.isAutoContrast) {
            this._recalculateAndSetContrastColor(varPrefix);
        }
    }
    setWarnColor(hex) {
        this.warn = hex;
        const varPrefix = MatCssPalettePrefix.Warn;
        const styleWarn = this._computePaletteColors(varPrefix, this.warn);
        this._setStyle(styleWarn);
        if (this.isAutoContrast) {
            this._recalculateAndSetContrastColor(varPrefix);
        }
    }
    setVariable(cssVarName, value) {
        this._setStyle([{
                name: cssVarName,
                val: value,
            }]);
    }
    setDarkTheme(isDark) {
        if (isDark) {
            this.document.body.classList.remove(this.cfg.lightThemeClass);
            this.document.body.classList.add(this.cfg.darkThemeClass);
        }
        else {
            this.document.body.classList.remove(this.cfg.darkThemeClass);
            this.document.body.classList.add(this.cfg.lightThemeClass);
        }
        this.isDarkTheme = isDark;
    }
    setAutoContrastEnabled(val) {
        this.isAutoContrast = val;
        if (val) {
            this._recalculateAndSetContrastColor(MatCssPalettePrefix.Primary);
            this._recalculateAndSetContrastColor(MatCssPalettePrefix.Accent);
            this._recalculateAndSetContrastColor(MatCssPalettePrefix.Warn);
        }
        else {
            this.setContrastColorThresholdPrimary(this.contrastColorThresholdPrimary);
            this.setContrastColorThresholdAccent(this.contrastColorThresholdAccent);
            this.setContrastColorThresholdWarn(this.contrastColorThresholdWarn);
        }
    }
    setContrastColorThresholdPrimary(threshold) {
        this.contrastColorThresholdPrimary = threshold;
        this.setContrastColorThreshold(threshold, MatCssPalettePrefix.Primary);
    }
    setContrastColorThresholdAccent(threshold) {
        this.contrastColorThresholdAccent = threshold;
        this.setContrastColorThreshold(threshold, MatCssPalettePrefix.Accent);
    }
    setContrastColorThresholdWarn(threshold) {
        this.contrastColorThresholdWarn = threshold;
        this.setContrastColorThreshold(threshold, MatCssPalettePrefix.Warn);
    }
    setContrastColorThreshold(threshold, palettePrefix) {
        let color = MaterialCssVarsService.DARK_TEXT_VAR;
        const updates = this.cfg.sortedHues.map((hue) => {
            if (hue === threshold) {
                color = MaterialCssVarsService.LIGHT_TEXT_VAR;
            }
            return {
                val: this._getCssVarValue(color),
                name: `${palettePrefix + MaterialCssVarsService.CONTRAST_PREFIX}${hue}`,
            };
        });
        this._setStyle(updates);
    }
    /**
     * Generate palette color based on traditional values
     */
    setAlternativeColorAlgorithm(traditional) {
        this.cfg.isAlternativeColorAlgorithm = traditional;
        this.setPrimaryColor(this.primary);
        this.setAccentColor(this.accent);
        this.setWarnColor(this.warn);
    }
    /** @deprecated use setContrastColorThresholdPrimary instead */
    changeContrastColorThresholdPrimary(threshold) {
        this.setContrastColorThresholdPrimary(threshold);
    }
    /** @deprecated use setContrastColorThresholdAccent instead */
    changeContrastColorThresholdAccent(threshold) {
        this.setContrastColorThresholdAccent(threshold);
    }
    /** @deprecated use setContrastColorThresholdWarn instead */
    changeContrastColorThresholdWarn(threshold) {
        this.setContrastColorThresholdWarn(threshold);
    }
    /** @deprecated use setContrastColorThreshold instead */
    changeContrastColorThreshold(threshold, palettePrefix) {
        this.setContrastColorThreshold(threshold, palettePrefix);
    }
    getPaletteForColor(hex) {
        if (this.cfg.isAlternativeColorAlgorithm) {
            return this.getTraditionalPaletteForColor(hex);
        }
        else {
            return this.getConstantinPaletteForColor(hex);
        }
    }
    getTraditionalPaletteForColor(hex) {
        return this.cfg.colorMap.map(item => {
            const mappedColor = new TinyColor(hex)
                .lighten(item.map[0])
                .darken(item.map[1])
                .saturate(item.map[2]);
            const c = new TinyColor(mappedColor);
            return {
                hue: item.name,
                isLight: c.isLight(),
                color: {
                    ...c.toRgb(),
                    str: `rgb(${c.toRgb().r},${c.toRgb().g},${c.toRgb().b})`
                }
            };
        });
    }
    getConstantinPaletteForColor(hex) {
        return this.cfg.colorMap.map((item) => {
            const c = this.computePalletTriad(hex, item.name);
            return {
                hue: item.name,
                isLight: c.isLight,
                color: {
                    ...c.rgb,
                    str: `rgb(${c.rgb.r},${c.rgb.g},${c.rgb.b})`
                }
            };
        });
    }
    getPaletteWithContrastForColor(hex) {
        const lightText = this._getCssVarValue(MaterialCssVarsService.LIGHT_TEXT_VAR);
        const darkText = this._getCssVarValue(MaterialCssVarsService.DARK_TEXT_VAR);
        const palette = this.getPaletteForColor(hex);
        // TODO handle non auto case
        return palette.map((item) => {
            const contrastStr = item.isLight
                ? lightText
                : darkText;
            const sLight = contrastStr.split(',').map(v => +v);
            const cco = { r: sLight[0], g: sLight[1], b: sLight[2], a: 1 };
            return {
                ...item,
                contrast: {
                    ...cco,
                    str: `${cco.r},${cco.g},${cco.b}`
                },
            };
        });
    }
    _computePaletteColors(prefix, hex) {
        return this.getPaletteForColor(hex).map(item => {
            const c = item.color;
            return {
                name: `${prefix}${item.hue}`,
                val: `${c.r}, ${c.g}, ${c.b}`
            };
        });
    }
    _recalculateAndSetContrastColor(palettePrefix) {
        const updates = this._calculateContrastColorsForCurrentValues(palettePrefix)
            .map(({ contrastColorVar, hue }) => {
            return {
                val: this._getCssVarValue(contrastColorVar),
                name: `${palettePrefix + MaterialCssVarsService.CONTRAST_PREFIX}${hue}`,
            };
        });
        this._setStyle(updates);
    }
    _calculateContrastColorsForCurrentValues(palettePrefix) {
        return this.cfg.sortedHues.map((hue) => {
            const hueVarVal = this._getCssVarValue(`${palettePrefix}${hue}`);
            const c = new TinyColor(`rgb(${hueVarVal})`);
            const contrastColorVar = c.isDark()
                ? MaterialCssVarsService.LIGHT_TEXT_VAR
                : MaterialCssVarsService.DARK_TEXT_VAR;
            return {
                contrastColorVar,
                hue,
            };
        });
    }
    _setStyle(vars) {
        vars.forEach(s => {
            this.renderer.setStyle(this.ROOT, s.name, s.val, RendererStyleFlags2.DashCase);
        });
    }
    _getCssVarValue(v) {
        return getComputedStyle(this.ROOT).getPropertyValue(v);
    }
    /**
     * Compute pallet colors based on a Triad (Constantin)
     * see: https://github.com/mbitson/mcg
     */
    computePalletTriad(hex, hue) {
        const baseLight = new TinyColor('#ffffff');
        const baseDark = this.multiply(new TinyColor(hex).toRgb(), new TinyColor(hex).toRgb());
        const baseTriad = new TinyColor(hex).tetrad();
        let color;
        switch (hue) {
            case '50':
                color = this.getColorObject(baseLight.mix(hex, 12));
                break;
            case '100':
                color = this.getColorObject(baseLight.mix(hex, 30));
                break;
            case '200':
                color = this.getColorObject(baseLight.mix(hex, 50));
                break;
            case '300':
                color = this.getColorObject(baseLight.mix(hex, 70));
                break;
            case '400':
                color = this.getColorObject(baseLight.mix(hex, 85));
                break;
            case '500':
                color = this.getColorObject(baseLight.mix(hex, 100));
                break;
            case '600':
                color = this.getColorObject(baseDark.mix(hex, 87));
                break;
            case '700':
                color = this.getColorObject(baseDark.mix(hex, 70));
                break;
            case '800':
                color = this.getColorObject(baseDark.mix(hex, 54));
                break;
            case '900':
                color = this.getColorObject(baseDark.mix(hex, 25));
                break;
            case 'A100':
                color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(80).lighten(65));
                break;
            case 'A200':
                color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(80).lighten(55));
                break;
            case 'A400':
                color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(100).lighten(45));
                break;
            case 'A700':
                color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(100).lighten(40));
                break;
            default:
                break;
        }
        return color;
    }
    multiply(rgb1, rgb2) {
        rgb1.b = Math.floor(rgb1.b * rgb2.b / 255);
        rgb1.g = Math.floor(rgb1.g * rgb2.g / 255);
        rgb1.r = Math.floor(rgb1.r * rgb2.r / 255);
        return new TinyColor('rgb ' + rgb1.r + ' ' + rgb1.g + ' ' + rgb1.b);
    }
    getColorObject(value) {
        const c = new TinyColor(value);
        return { rgb: c.toRgb(), isLight: c.isLight() };
    }
}
MaterialCssVarsService.CONTRAST_PREFIX = 'contrast-';
MaterialCssVarsService.DARK_TEXT_VAR = '--dark-primary-text';
MaterialCssVarsService.LIGHT_TEXT_VAR = '--light-primary-text';
MaterialCssVarsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: MaterialCssVarsService, deps: [{ token: i0.RendererFactory2 }, { token: DOCUMENT }, { token: MATERIAL_CSS_VARS_CFG }], target: i0.ɵɵFactoryTarget.Injectable });
MaterialCssVarsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: MaterialCssVarsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: MaterialCssVarsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.RendererFactory2 }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MATERIAL_CSS_VARS_CFG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,